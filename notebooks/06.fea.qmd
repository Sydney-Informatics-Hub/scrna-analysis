---
title: "scRNA Analysis - 06 - Functional Enrichment Analysis"
author: "Sydney Informatics Hub"
format: html
---

This notebook is designed to run functional enrichment analysis on differential expression results created from a pseudobulked Seurat dataset. This includes both gene set enrichment analysis (GSEA) and over-representation analysis (ORA).

::: {.callout-note title="Overview"}

The key steps in this notebook are:

1. Load in the differential expression results from the previous notebook
2. Perform functional enrichment analysis based on the differential expression results

:::

## Imports

While working through this notebook manually, you will need to run the following block of code to import all the necessary R libraries and helper functions:

```{r setup, include = FALSE}
# Imports
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(tidyverse)
library(Seurat)
library(scuttle)
library(ggplot2)
library(ggrepel)
library(DESeq2)
library(WebGestaltR)
library(DT)
source(here("R/shinyapps.R"))

# A function for helping to render the bar plots nicely
subchunkify <- function(g, fig_height=7, fig_width=5) {
  g_deparsed <- paste0(
    deparse(
      function() {g}
    ),
    collapse = ''
  )

  sub_chunk <- paste0(
    "`",
    "``{r sub_chunk_",
    floor(runif(1) * 10000),
    ", fig.height=",
    fig_height,
    ", fig.width=",
    fig_width,
    ", echo=FALSE}",
    "\n(", 
    g_deparsed
    , ")()",
    "\n`","``"
  )

  cat(knitr::knit(text = knitr::knit_expand(text = sub_chunk), quiet = TRUE))
}
```

## Read in the differential expression data

The following block assumes you have run all the notebooks up to and including `05.pseudo.qmd`. That notebook produces a `.Rds` file called `outputs/differential_expression_analyses.Rds` that will be read in now. That notebook also produces a CSV file containing the fold-change and p-value thresholds you set for differential expression testing; this will also be read in now.

```{r inputs}
de_rds <- here("outputs/differential_expression_analyses.Rds")

# Load data
de <- readRDS(de_rds)

# Load p-value and fold-change thresholds
de_thresholds <- read_csv(here("inputs/de_thresholds.csv"))
p_val_cutoff <- de_thresholds$p_val_cutoff
fc_cutoff <- de_thresholds$fc_cutoff
```

## Functional enrichment analysis

We can use the differential gene expression profiles of our samples to identify gene sets and biological pathways that are significantly over-represented or enriched. This can help us identify potential biological implications of a treatment on a particular cell type, for example.

First, let's review again the differential gene expression data from each of the comparisons we made:

```{r get_degs_per_condition, message = FALSE, warning = FALSE}
de_per_condition <- de %>%
  mutate(abs_avg_log2FC = abs(avg_log2FC)) %>%
  arrange(desc(avg_log2FC)) %>%
  group_by(Identity) %>%
  group_split() %>%
  setNames(lapply(., function(x) { x$Identity[1] }))

for(n in names(de_per_condition)) {
  de_per_condition[[n]] %>%
    filter(sig == "sig") %>%
    dplyr::select(Gene.Symbol, Gene, avg_log2FC, abs_avg_log2FC, pct.1, pct.2, p_val, p_val_adj_all) %>%
    mutate(across(where(is.numeric), ~ round(.x, 4))) %>%
    mutate(pct.1 = pct.1 * 100, pct.2 = pct.2 * 100) %>%
    datatable(
      colnames = c(
        "Gene Name",
        "Ensembl ID",
        "Avg. log2 Fold Change",
        "Abs(Avg. log2 Fold Change)",
        paste0("% Case Samples Expressing Gene"),
        paste0("% Control Samples Expressing Gene"),
        "p-value",
        "Adjusted p-value"
      ),
      caption = paste0("DE Genes: ", n)
    ) %>%
    print()
}
```

We can look at our top up- and down-regulated genes per condition:

Top upregulated genes per condition:

```{r get_top_upreg_genes_per_condition}
for(n in names(de_per_condition)) {
  de_per_condition[[n]] %>%
    filter(sig == "sig", avg_log2FC > 0) %>%
    arrange(p_val_adj_all) %>%
    head() %>%
    dplyr::select(Gene.Symbol, Gene, avg_log2FC, abs_avg_log2FC, pct.1, pct.2, p_val, p_val_adj_all) %>%
    mutate(across(where(is.numeric), ~ round(.x, 4))) %>%
    mutate(pct.1 = pct.1 * 100, pct.2 = pct.2 * 100) %>%
    datatable(
      colnames = c(
        "Gene Name",
        "Ensembl ID",
        "Avg. log2 Fold Change",
        "Abs(Avg. log2 Fold Change)",
        paste0("% Case Samples Expressing Gene"),
        paste0("% Control Samples Expressing Gene"),
        "p-value",
        "Adjusted p-value"
      ),
      caption = paste0("Top Upregulated Genes: ", n)
    ) %>%
    print()
}
```

Top downregulated genes per condition:

```{r get_top_downreg_genes_per_condition}
for(n in names(de_per_condition)) {
  de_per_condition[[n]] %>%
    filter(sig == "sig", avg_log2FC < 0) %>%
    arrange(p_val_adj_all) %>%
    head() %>%
    dplyr::select(Gene.Symbol, Gene, avg_log2FC, abs_avg_log2FC, pct.1, pct.2, p_val, p_val_adj_all) %>%
    mutate(across(where(is.numeric), ~ round(.x, 4))) %>%
    mutate(pct.1 = pct.1 * 100, pct.2 = pct.2 * 100) %>%
    datatable(
      colnames = c(
        "Gene Name",
        "Ensembl ID",
        "Avg. log2 Fold Change",
        "Abs(Avg. log2 Fold Change)",
        paste0("% Case Samples Expressing Gene"),
        paste0("% Control Samples Expressing Gene"),
        "p-value",
        "Adjusted p-value"
      ),
      caption = paste0("Top Downregulated Genes: ", n)
    ) %>%
    print()
}
```

For running the pseudobulked over-representation and gene set enrichment analyses, we will use WebGestaltR. In the next code block, we read in the list of databases this package contains:

```{r get_webgestaltr_databases, eval = FALSE}
databases <- listGeneSet()
```

We will also prepare the list of background genes, that is, all the genes that were detected in our cells (whether they were differentially expressed or not):

```{r get_bg_genes_per_condition}
bg_per_condition <- lapply(de_per_condition, function(x) {
  x %>% pull(Gene)
})
```

### Pathway over-representation analysis (ORA)

For this part, we will look for biological pathways that are over-represented among DEGs.

First, we filter for significant DEGs:

```{r filter_sig_degs}
ora_per_condition <- lapply(
  de_per_condition, function(x) {
    filter(x, p_val_adj_all < p_val_cutoff, abs(avg_log2FC) > log2(fc_cutoff))
  }
)

lapply(ora_per_condition, nrow)
```

We now prepare output directories for each ORA analysis and run them:

```{r run_ora, eval = FALSE}
outdir_prefix <- here("outputs/pathway_analysis/ora")
ora_results_per_condition <- lapply(names(ora_per_condition), function(cond) {
  outdir <- here(outdir_prefix, cond)
  dir.create(outdir, recursive = TRUE)
  
  df <- ora_per_condition[[cond]]
  bg <- bg_per_condition[[cond]]
  
  WebGestaltR(
    enrichMethod = "ORA",
    interestGene = df$Gene,
    interestGeneType = "ensembl_gene_id",
    referenceGene = bg,
    referenceGeneType = "ensembl_gene_id",
    enrichDatabase = databases$name[startsWith(databases$name, "pathway")],
    isOutput = TRUE,
    nThreads = 2,
    outputDirectory = outdir,
    projectName = cond
  )
})
names(ora_results_per_condition) <- names(ora_per_condition)

gc()  # Clean up memory
```

### Gene set enrichment analysis (GSEA)

We also perform a similar procedure for each GSEA analysis:

```{r run_gsea, eval = FALSE}
outdir_prefix <- here("outputs/pathway_analysis/gsea")
gsea_results_per_condition <- lapply(names(de_per_condition), function(cond) {
  outdir <- here(outdir_prefix, cond)
  dir.create(outdir, recursive = TRUE)
  
  df <- de_per_condition[[cond]] %>%
    select(Gene, avg_log2FC)
  bg <- bg_per_condition[[cond]]
  
  WebGestaltR(
    enrichMethod = "GSEA",
    interestGene = df,
    interestGeneType = "ensembl_gene_id",
    referenceGene = bg,
    referenceGeneType = "ensembl_gene_id",
    enrichDatabase = databases$name[grepl("^geneontology_.*_noRedundant$", databases$name, perl = TRUE)],
    isOutput = TRUE,
    nThreads = 2,
    outputDirectory = outdir,
    projectName = cond
  )
})
names(gsea_results_per_condition) <- names(de_per_condition)

gc()  # Clean up memory
```

## Exploring the functional enrichment analysis results

### Load results tables

```{r get_fea_results}
ora_results <- lapply(names(de_per_condition), function(n) {
  results_file <- here("outputs", "pathway_analysis", "ora", n, paste0("Project_", n), paste0("enrichment_results_", n, ".txt"))
  read_tsv(results_file, show_col_types = FALSE)
})
names(ora_results) <- names(de_per_condition)

gsea_results <- lapply(names(de_per_condition), function(n) {
  results_file <- here("outputs", "pathway_analysis", "gsea", n, paste0("Project_", n), paste0("enrichment_results_", n, ".txt"))
  read_tsv(results_file, show_col_types = FALSE)
})
names(gsea_results) <- names(de_per_condition)
```

### ORA results

```{r show_ora_results}
for(n in names(ora_results)) {
  df <- ora_results[[n]]
  df %>%
    dplyr::select(geneSet, description, size, overlap, expect, enrichmentRatio, pValue, FDR) %>%
    mutate(across(where(is.numeric), ~ round(.x, 4))) %>%
    datatable(
      colnames = c("Gene Set ID", "Description", "Total # Genes in Set", "# Input Genes in Set", "Expected # Input Genes in Set", "Enrichment Ratio", "p-value", "FDR"),
      caption = paste("Over Representation Analysis - significant results:", n)
    ) %>%
    print()
}
```

```{r get_top_ora_plots}
ora_plots <- lapply(ora_results, function(x) {
  x %>%
    mutate(
      log2EnrichmentRatio = log2(enrichmentRatio),
      direction = case_when(log2EnrichmentRatio > 0 ~ "Upregulated", .default = "Downregulated")
    ) %>%
    ggplot(aes(x = reorder(description, log2EnrichmentRatio), y = log2EnrichmentRatio, fill = direction)) +
    geom_bar(stat = "identity") +
    ggtitle(paste("Over Representation Analysis - significant results:", n)) +
    coord_flip()
})
names(ora_plots) <- names(ora_results)

ora_plot_sizes <- lapply(names(ora_plots), function(n) {
  p <- ora_plots[[n]]
  df <- ora_results[[n]]
  p_height <- 5 + dim(df)[1] * 0.2
  p_width <- 5 + max(nchar(df$description)) * 0.1
  return(list(height = p_height, width = p_width))
})
names(ora_plot_sizes) <- names(ora_plots)
```

```{r plot_ora_results, echo = FALSE, eval = FALSE}
for (p in ora_plots) {
  print(p)
}
```

```{r render_ora_results, echo = FALSE, results = "asis"}
for(n in names(ora_plots)) {
  p <- ora_plots[[n]]
  s <- ora_plot_sizes[[n]]
  subchunkify(p, s$height, s$width)
}
```

### GSEA results

```{r show_gsea_results}
for(n in names(gsea_results)) {
  df <- gsea_results[[n]]
  df %>%
    dplyr::select(geneSet, description, size, enrichmentScore, normalizedEnrichmentScore, pValue, FDR) %>%
    mutate(across(where(is.numeric), ~ round(.x, 4))) %>%
    datatable(
      colnames = c("Gene Set ID", "Description", "Total # Genes in Set", "Enrichment Score", "Normalised Enrichment Score", "p-value", "FDR"),
      caption = paste("Gene Set Enrichment Analysis - significant results:", n)
    ) %>%
    print()
}
```

```{r get_top_gsea_plots}
gsea_plots <- lapply(gsea_results, function(x) {
  x %>%
    mutate(
      direction = case_when(normalizedEnrichmentScore > 0 ~ "Upregulated", .default = "Downregulated")
    ) %>%
    ggplot(aes(x = reorder(description, normalizedEnrichmentScore), y = normalizedEnrichmentScore, fill = direction)) +
    geom_bar(stat = "identity") +
    ggtitle(paste("Gene Set Enrichment Analysis - significant results:", n)) +
    coord_flip()
})
names(gsea_plots) <- names(gsea_results)

gsea_plot_sizes <- lapply(names(gsea_plots), function(n) {
  p <- gsea_plots[[n]]
  df <- gsea_results[[n]]
  p_height <- 5 + dim(df)[1] * 0.2
  p_width <- 5 + max(nchar(df$description)) * 0.1
  return(list(height = p_height, width = p_width))
})
names(gsea_plot_sizes) <- names(gsea_plots)
```

```{r plot_gsea_results, echo = FALSE, eval = FALSE}
for (p in gsea_plots) {
  print(p)
}
```

```{r render_gsea_results, echo = FALSE, results = "asis"}
for(n in names(gsea_plots)) {
  p <- gsea_plots[[n]]
  s <- gsea_plot_sizes[[n]]
  subchunkify(p, s$height, s$width)
}
```
